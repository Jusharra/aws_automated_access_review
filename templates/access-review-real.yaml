AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Access Review - Automated security posture assessment and reporting'

Parameters:
  RecipientEmail:
    Type: String
    Description: Email address to receive security reports
    
  ScheduleExpression:
    Type: String
    Default: 'rate(30 days)'
    Description: "Schedule expression for running the access review (default: monthly)"
    
  ReportBucketName:
    Type: String
    Default: ''
    Description: Name for the S3 bucket to store reports (leave blank for auto-generated name)

Conditions:
  CreateBucketWithGeneratedName: !Equals [!Ref ReportBucketName, '']

Resources:
  # S3 Bucket for storing reports
  ReportBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !If
        - CreateBucketWithGeneratedName
        - !Ref 'AWS::NoValue'
        - !Ref ReportBucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldReports
            Status: Enabled
            ExpirationInDays: 90
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # S3 Bucket Policy for private access
  ReportBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ReportBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowOnlyAccountAccess
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 's3:*'
            Resource: 
              - !Sub 'arn:aws:s3:::${ReportBucket}'
              - !Sub 'arn:aws:s3:::${ReportBucket}/*'

  # IAM Role for Lambda execution
  AccessReviewLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AccessReviewPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # S3 permissions
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub ${ReportBucket.Arn}/*
              
              # IAM read permissions
              - Effect: Allow
                Action:
                  - iam:GetPolicy
                  - iam:GetPolicyVersion
                  - iam:GetRole
                  - iam:GetRolePolicy
                  - iam:GetUser
                  - iam:GetUserPolicy
                  - iam:ListAttachedRolePolicies
                  - iam:ListAttachedUserPolicies
                  - iam:ListPolicies
                  - iam:ListRolePolicies
                  - iam:ListRoles
                  - iam:ListUserPolicies
                  - iam:ListUsers
                  - iam:GetLoginProfile
                  - iam:ListMFADevices
                  - iam:ListAccessKeys
                  - iam:GetAccountPasswordPolicy
                Resource: '*'
              
              # Organizations permissions (for SCPs and RCPs)
              - Effect: Allow
                Action:
                  - organizations:DescribeOrganization
                  - organizations:ListPolicies
                  - organizations:DescribePolicy
                  - organizations:ListTargetsForPolicy
                  - organizations:ListRoots
                Resource: '*'
              
              # Security Hub permissions
              - Effect: Allow
                Action:
                  - securityhub:GetFindings
                  - securityhub:GetInsights
                  - securityhub:GetEnabledStandards
                Resource: '*'
              
              # IAM Access Analyzer permissions
              - Effect: Allow
                Action:
                  - access-analyzer:ListAnalyzers
                  - access-analyzer:ListFindings
                  - access-analyzer:GetFinding
                Resource: '*'
              
              # CloudTrail permissions
              - Effect: Allow
                Action:
                  - cloudtrail:LookupEvents
                  - cloudtrail:DescribeTrails
                  - cloudtrail:GetTrailStatus
                  - cloudtrail:GetEventSelectors
                Resource: '*'
              
              # Bedrock permissions
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: '*'
              
              # SES permissions
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                  - ses:VerifyEmailIdentity
                  - ses:GetIdentityVerificationAttributes
                Resource: '*'

  # Lambda function for access review
  AccessReviewLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-access-review
      Handler: index.handler
      Role: !GetAtt AccessReviewLambdaRole.Arn
      Runtime: python3.11
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          REPORT_BUCKET: !Ref ReportBucket
          RECIPIENT_EMAIL: !Ref RecipientEmail
      Code: 
        ZipFile: |
          # This is a placeholder. The actual code will be updated after stack creation
          # using the AWS Lambda update-function-code API call.
          def handler(event, context):
              print("Placeholder Lambda function. This will be replaced by the actual code.")
              return {
                  'statusCode': 200,
                  'body': 'Placeholder response'
              }

  # CloudWatch Event Rule for scheduled execution
  ScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Scheduled rule for AWS Access Review"
      ScheduleExpression: !Ref ScheduleExpression
      State: ENABLED
      Targets:
        - Arn: !GetAtt AccessReviewLambda.Arn
          Id: "AccessReviewTarget"

  # Permission for CloudWatch Events to invoke Lambda
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AccessReviewLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ScheduledRule.Arn

Outputs:
  AccessReviewS3Bucket:
    Description: "Name of the S3 bucket storing access review reports"
    Value: !Ref ReportBucket
    
  AccessReviewLambdaArn:
    Description: "ARN of the Lambda function performing access reviews"
    Value: !GetAtt AccessReviewLambda.Arn
    
  ScheduledRuleArn:
    Description: "ARN of the CloudWatch Events rule for scheduled execution"
    Value: !GetAtt ScheduledRule.Arn 